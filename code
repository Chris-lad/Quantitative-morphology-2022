# Loading the packages
library(DESeq2)
library(edgeR)
library(qusage)
library(ggplot2)
library(corrplot)
library(lessR)
library(ggcorrplot)
library(hrbrthemes)
library(devtools)
library(factoextra)
library(FactoMineR)
library(fgsea)

#setting the seed
set.seed(0)


# Reading the clinical data, taking as rownames the unique IDs of the organs (SMPLID)
clinical.data = read.delim(file='clinical-data.tsv',sep ='\t',header=TRUE,row.names=1)

# Reading the morphological counts, taking as rownames the unique IDs of the organs (SMPLID)
morphological.counts = read.delim(file='morphological-counts.tsv',sep='\t',header=TRUE,row.names=1)

# Reading the RNA-read-counts, taking as rownames the unique IDs of the genes (ENSEMBL ID)
RNA.read.counts = read.delim(file='RNA-read-counts.tsv',sep='\t',header=TRUE,row.names=1)

# Reading the gmt file
pathways <- gmtPathways("c2.cp.reactome.v7.5.1.symbols.gmt")

## Creating a vector for each clinical variable
Sex <- clinical.data$SEX
Age <- clinical.data$AGE
Height <- clinical.data$HGHT
Weight <- clinical.data$WGHT
BMI <- clinical.data$BMI
IschemicTime <- clinical.data$TRISCHD
HardyScale <- clinical.data$DTHHRDY
Cohort <- clinical.data$COHORT

## Checking if any NA in vector ---> should Return FALSE
any(is.na(HardyScale))
any(is.na(Cohort))
any(is.na(IschemicTime))
any(is.na(Age))
any(is.na(BMI))
any(is.na(Height))
any(is.na(Weight))
any(is.na(Sex))


#### PART 3 (Question 1)

############ PART 3.1: DISTRIBUTION OF THE CLINICAL VARIABLES 

# Checking that we only have men in our dataset
men.data <- subset(clinical.data,Sex == 1)
print(nrow(men.data) == nrow(clinical.data)) 
#we still have just as many rows in each dataset, ie no organs were removed due to having belonged to a woman -> there are only men

# histogram of the Age, with mean and median lines
hist(Age)
abline(v=mean(Age),col="red",lwd=2)
abline(v=median(Age),col="blue",lwd=2)
text(x = 30,
     y = 20, 
     paste("Mean =", round(mean(Age))),
     col = "red",
     cex = 1)

text(x = 30,
     y = 22,
     paste("Median =", round(median(Age))),
     col = "blue",
     cex = 1)

print(median(Age))

# histogram of Height, with mean line
hist(Height)
abline(v=mean(Height),col="red",lwd=2)

# histogram of Weight, with mean line
hist(Weight)
abline(v=mean(Weight),col="red",lwd=2)

# histogram of BMI, with mean line
hist(BMI)
abline(v=mean(BMI),col="red",lwd=2)

# histogram of the Ischemic time, with mean line
hist(IschemicTime, xlab='Ischemic Time (min)')
abline(v=mean(IschemicTime),col="red",lwd=2)

# Distribution of data according to the HardyScale
hist(HardyScale)
abline(v=mean(HardyScale),col="red",lwd=2)

# THE VISUAL EXPLORATION IS NOT ENOUGH TO CONCLUDE IF SOME VARIABLES ARE 
# NORMALLY DISTRIBUTED OR NOT, a formal normality test is necessary. 

# Shapiro test for Age
shapiro.test(Age)
# Shapiro test for BMI
shapiro.test(BMI)
# Shapiro test for HardyScale
shapiro.test(HardyScale)
# Shapiro test for Height
shapiro.test(Height)
# Shapiro test for IschemicTime
shapiro.test(IschemicTime)
# Shapiro test for Sex
#shapiro.test(Sex) # all 'x' values are identical
# Shapiro test for Weight
shapiro.test(Weight)

## THE SHAPIRO-TEST CONFIRMED THAT NONE OF THE CLINICAL VARIABLE, EXCEPT FOR WGHT, ARE
## NORMALLY DISTRIBUTED AS ALL THE P-VALUES WERE VERY VERY LOW.
## WE CAN NOT ASSUME NORMALITY FOR THESE VARIABLES

## Printing the contingency table of the categorical variables 

table(Cohort)
table(HardyScale)


## Creating barplot Hardy Scale
barplot(table(HardyScale), xlab = 'Hardy Scale',
        ylab = 'count', col='blue')


# Creating a barplot of the donor type
barplot(table(Cohort), xlab = 'Type of donor',
        ylab = 'count', col='blue')


############ PART 3.2: Correlations between clinical variables

# Visualization of the relation between variables
#pairs(clinical_data) --> doesn't work because of the presence of non-numerical variables
pairs(~ Age + Height + Weight + BMI + IschemicTime)

# Creating a dataframe containing only the numerical variables. 
num.var <- clinical.data[, c("AGE", "HGHT", "WGHT", "BMI", "TRISCHD")]

# Computation of the Matrix of correlation
correlation = cor(num.var, method = "spearman")
correlation <- round(correlation,2)
print(correlation)

# Correlogram is a graph of correlation matrix
corrplot(correlation) #with just colours
corrplot(correlation, order = 'AOE', addCoef.col = 'black', tl.pos = 'd',
         cl.pos = 'n', col = COL2('PiYG')) #with colours and values

# Scatter plot btw Weight and BMI and linear regression line.
plot(BMI, Weight, pch = 16)
abline(lm(Weight ~ BMI), col = "red", lwd = 3)
#Correlation test
cor.test(Weight,BMI,method = "spearman")

# Scatter plot btw Weight and Height and linear regression line.
plot(Weight, Height, pch = 16)
abline(lm(Height ~ Weight), col = "red", lwd = 3)
#Correlation test

# Scatter plot btw Age and Ischemic time and linear regression line.
plot(IschemicTime, Age, pch = 16)
abline(lm(Age ~ IschemicTime), col = "red", lwd = 3)
#Correlation test

############ PART 3.3: Confounding clinical variables

###### 1- Vérification du biais 1! 
# Test de Wilcoxon-Whithney de l'age et de la cohorte
# The post-mortem patients are older than the Organ Donor patients
boxplot(clinical.data$AGE ~ clinical.data$COHORT)
# Test of Wilcoxon Mann-Withney <- Les Deux groupes sont bien différents car rejet de H0
# H0 = 2 populations (observations) sont elles les memes ? 
wilcox.test(clinical.data$AGE ~ clinical.data$COHORT)

# Boxplot du temps ischémique en fonction de la cohort
# On voit une tendance des post-mortem à avoir un temps ischémique plus long. 
boxplot(clinical.data$TRISCHD~ clinical.data$COHORT)
# Vérification de cette tendance avec un test de Wilcoxon-Mann-Whitney
wilcox.test(clinical.data$TRISCHD ~ clinical.data$COHORT)

# --> Useless # A basic scatterplot BMI vs Weight with color
#     depending on donor type
ggplot(clinical.data, aes(x=BMI, y=WGHT, color=COHORT)) + 
  geom_point(size=6) +
  theme_ipsum()

 ## 
# --> Useless  # A basic scatterplot BMI vs Weight with color
#     depending on Hardy scale
ggplot(clinical.data, aes(x=BMI, y=WGHT, color=DTHHRDY)) + 
  geom_point(size=6) +
  theme_ipsum()

# --> Useless # Scatter plot Weight vs Height depending on donor type
ggplot(clinical.data, aes(x=WGHT, y=HGHT, color=COHORT)) + 
  geom_point(size=6) +
  theme_ipsum()

# --> Useless # Scatter plot Weight vs Height depending on Hardy Scale
ggplot(clinical.data, aes(x=WGHT, y=HGHT, color=DTHHRDY)) + 
  geom_point(size=6) +
  theme_ipsum()

# Scatter plot of ischemic time vs Age depending on the cohort
plot(IschemicTime, Age, pch = 16, col=factor(Cohort))


# Legend
legend("bottomright",
       legend = levels(factor(Cohort)),
       pch = 19,
       col = factor(levels(factor(Cohort))))


# Scatter plot of ischemic time vs Age depending on the Hardy Scale.
plot(IschemicTime, Age, pch = 16, col=factor(HardyScale))


# Legend
legend("bottomright",
       legend = levels(factor(HardyScale)),
       pch = 19,
       col = factor(levels(factor(HardyScale))))

#Grouped barplot for COHORT and DTHHRDY

clinical.data$DTHHRDY <- as.factor(clinical.data$DTHHRDY)
clinical.data$COHORT <- as.factor(clinical.data$COHORT)

compare_table <- table(clinical.data$COHORT,clinical.data$DTHHRDY)
# Shows the proportion of type of donors characterized by a given Hardy scale. 
print(compare_table)

barplot(compare_table,main="Hardy scale",
        col=c("black","red"),beside=TRUE)
legend("topright", legend=c("Organ Donor (OPO)", "Postmortem"),
       col=c("black", "red"), pch=19, cex=0.6)

#nearly all organ donors are of hardy scale 0
#nearly all patients of hardy scale 0 are organ donors
#How many organ donors have a hardy scale value different than 0?
organs_not0 <- subset(clinical.data,
                      Cohort == "Organ Donor (OPO)" & HardyScale != 0)
print(nrow(organs_not0))
#How many patients of hardy scale 0 are postmortem donors?
hardy0_PM <- subset(clinical.data,
                    Cohort == "Postmortem" & HardyScale == 0)
print(nrow(hardy0_PM))
#How many organ donors?
organs <- subset(clinical.data,Cohort == "Organ Donor (OPO)")
print(nrow(organs))
#How many patients of hardy scale 0?
hardy0 <- subset(clinical.data,HardyScale == 0)
print(nrow(hardy0))
#What percentage of organ donors aren't of hardy scale 0?
print(nrow(organs_not0)/nrow(organs)*100)
#What percentage of patients of hardy scale 0 aren't organ donors?
print(nrow(hardy0_PM)/nrow(hardy0)*100)

#Chi-squared test
#create a variable ventilator which is equal to 0 if DTHHRDY 
#is 0 and is equal to 1 otherwise
ventilator <- rep(NA,nrow(clinical.data))
for (i in 1:nrow(clinical.data)){
  if (clinical.data$DTHHRDY[i] == 0){
    ventilator[i] <- 0
  }
  else{
    ventilator[i] <- 1
  }
}

chisq.test(clinical.data$COHORT,ventilator) 
#a very small p-value (much smaller than 0.05) indicates that
#we may reject the H0 hypothesis = the variables are independent
#The two variables are therefore not independent
#the events DTHHRDY = 0 and COHORT = "Organ Donor (OPO)" are
#not independent     

#PCA analysis
#create a dataset containing only numerical values
num.data <- clinical.data[,-c(1,6,7,9,10,11)]

#pca with printed correlation circle
pca <- PCA(num.data, graph = TRUE)
#print the pca
plot(pca$ind$coord)
#print eigenvalues
print(pca$eig)
#scree plot
fviz_eig(pca, addlabels = TRUE, ylim = c(0, 50))

#print the PCA with coloured Cohort
plot(pca$ind$coord,col=factor(Cohort),pch=19,cex=0.6)
legend("bottomright", legend=levels(factor(Cohort)),
       col=factor(levels(factor(Cohort))), pch=19, cex=0.6)

#print the PCA with coloured hardy scale -> useless
plot(pca$ind$coord,col=factor(HardyScale),pch=19,cex=0.6)
legend("bottomright", legend=levels(factor(HardyScale)),
       col=factor(levels(factor(HardyScale))), pch=19, cex=0.6)

#### PART 4 (Question 2)

############ PARTS 4.1, 4.2 and 4.3 (Q2.1, Q2.2 and Q2.3)

# create the deseqdataset object, change variable design for every variable in clinical.data (Age, Hght etc)
dds <- DESeqDataSetFromMatrix(countData=t(morphological.counts), 
                              colData=clinical.data, 
                              design=~WGHT)
dds <- DESeq(dds)

# compute and visualize results
resultsNames(dds)
res <- results(dds)
res
mcols(res, use.names=TRUE)

#let's look at the results table
head(results(dds, tidy=TRUE))

# order results table according to the adjusted p-value; take the first 10 lines with the lowest padj
res <- res[order(res$padj),]
head(res, 10)

#plot of the log2 fold change vs the mean of the normalized counts
plotMA(res) 

###Automatic version, computes the padj and log2 fold change for the clusters associated to the technical and health/demographics variables,
###adds for  each cluster for each variable the padj value to the dataframe VarvsMorpho and the log2 fold change to the dataframe log2Morpho
###morphs will contain the lists of significantly associated clusters for each variable (ie. padj < 0.1)

#sort the clusters by increasing padj value and filter out ones of padj >= alpha
sign_padj <- function(padj_val,alpha=0.1){
  sorted_padj <- padj_val[padj_val<alpha & is.na(padj_val) == FALSE]
  names(sorted_padj) <- names(padj_val)[padj_val<alpha & is.na(padj_val) == FALSE]
  increasing_padj <- sort(sorted_padj,index.return=TRUE)$ix
  return(names(sorted_padj)[increasing_padj])
}

releventVars <- c(2,3,4,5,7,8,9) #relevant variables, ie health/demographic and technical variables
morphs <- rep(NA,length(releventVars))
VarvsMorpho <- data.frame(matrix(
  NA, nrow = ncol(morphological.counts),
  ncol = length(releventVars)
))
log2Morpho <- data.frame(matrix(
  NA, nrow = ncol(morphological.counts),
  ncol = length(releventVars)
))
rownames(VarvsMorpho) <- names(morphological.counts)
names(VarvsMorpho) <- names(clinical.data)[releventVars]
rownames(log2Morpho) <- names(morphological.counts)
names(log2Morpho) <- names(clinical.data)[releventVars]
for (i in 1:length(releventVars)){
  current_var <- releventVars[i]
  form <- as.formula(paste("~",names(clinical.data)[current_var]))
  dds <- DESeqDataSetFromMatrix(countData = t(morphological.counts),
                                colData = clinical.data, 
                                design=form)
  dds <- DESeq(dds)
  res <- results(dds)
  VarvsMorpho[,i] <- res$padj #add padj values
  log2Morpho[,i] <- res$log2FoldChange #add log2 fold change values
  plotMA(res,main=names(clinical.data)[current_var]) #plot of the log2 fold change vs the mean of the normalized counts
  print(names(clinical.data)[current_var])
  padjMorph <- res$padj
  names(padjMorph) <- rownames(VarvsMorpho)
  morphs[i] <- list(sign_padj(padjMorph))
}

#scatterplots of padj vs the morphological cluster
for (i in 1:ncol(VarvsMorpho)){
  plot(VarvsMorpho[,i], main = names(VarvsMorpho)[i],
       ylab="Adjusted p-value", xlab="Morphological cluster"
  )
  abline(h = 0.1, col = "red") #add the line indicating padj = 0.1
}

#Analysis of association of clusters to confounded variables
dds <- DESeqDataSetFromMatrix(countData = t(morphological.counts),
                              colData = clinical.data, 
                              design = ~AGE+COHORT+TRISCHD)
dds <- DESeq(dds)
res <- results(dds)
VarvsMorpho[,i] <- res$padj
plotMA(res, main = "~AGE + COHORT + TRISCHD")
plot(res$padj, main = "~AGE + COHORT + TRISCHD")
abline(h = 0.1, col = "red")
VarvsMorpho$confAGE <- res$padj #add a new column to VarvsMorpho corresponding to the padj values of the clusters for the confounded variables
log2Morpho$confAGE <- res$log2FoldChange #add a new column to log2Morpho corresponding to the log2 fold change values of the clusters for the
#confounded variables
padjMorph <- res$padj
names(padjMorph) <- rownames(VarvsMorpho)
morphs <- append(morphs,list(sign_padj(padjMorph))) #add to morphs the list of significantly associated clusters to the confounded variables

#For each variable (including the confounded variables), create two lists of significantly associated clusters depending on the sign of their 
#log2 fold change

sortLogs <- function(elements,logs){
  negativelog <- c()
  positivelog <- c()
  positive <- rep(NA,ncol(logs))
  negative <- rep(NA,ncol(logs))
  for (i in 1:length(elements)){
    if (length(elements[[i]]) != 0){
      log2folds <- logs[unlist(elements[i]),i]
      negativelog <- c()
      positivelog <- c()
      for (j in 1:length(elements[[i]])){
        if (log2folds[j] > 0){
          positivelog <- c(positivelog,elements[[i]][j])
        }
        else{
          negativelog <- c(negativelog,elements[[i]][j])
        }
      }
      positive[i] <- list(positivelog)
      negative[i] <- list(negativelog)
    }
    else{
      positive[i] <- NA
      negative[i] <- NA
    }
  }
  return(cbind(positive,negative))
}

sortedMorphs <- sortLogs(morphs,log2Morpho)
positiveMorphs <- sortedMorphs[,1]
negativeMorphs <- sortedMorphs[,2]

#Viewing the significantly associated clusters for each variable
var_names <- names(clinical.data)[releventVars]
var_names <- c(var_names,"AGE + COHORT + TRISCHD")
for (i in 1:length(morphs)){
  print(var_names[i])
  print(morphs[[i]])
}

#Viewing the number of significantly associated clusters for each variable
var_names <- names(clinical.data)[releventVars]
var_names <- c(var_names,"AGE + COHORT + TRISCHD")
for (i in 1:length(morphs)){
  print(var_names[i])
  print(length(morphs[[i]]))
}

#Viewing the positively significantly associated clusters for each variable
for (i in 1:length(positiveMorphs)){
  print(var_names[i])
  print(positiveMorphs[[i]])
}

#Viewing the negatively significantly associated clusters for each variable
for (i in 1:length(negativeMorphs)){
  print(var_names[i])
  print(negativeMorphs[[i]])
}

##Correlations of the clusters

#replaceNames takes a list of morphological clusters and returns a list where "Mophological.cluster." has been removed from their names,
#leaving only their associated number -> to avoid having overly full graphs where the names of the morphological clusters are necessary
replaceNames <- function(df){
  futureNames <- rep(NA,ncol(df))
  for (i in 1:ncol(df)){
    currentName <- names(df)[i]
    n <- nchar(currentName)
    if (n == 22){
      futureNames[i] <- substr(currentName,n,n)
    }
    else{
      futureNames[i] <- substr(currentName,n-1,n)
    }
  }
  return(futureNames)
}

#First type of correlation matrix representation
for (i in 1:length(morphs)){
  if (i != 4){
    print(names(VarvsMorpho)[i])
    clusters <- morphs[i]
    corrplot(cor(morphological.counts[,unlist(clusters)],method="spearman"))
  }
}

#Second type of correlation matrix representation
for (i in 1:length(morphs)){
  if (!(i == 4)){
    print(names(VarvsMorpho)[i])
    confMorphs <- morphological.counts[,unlist(morphs[[i]])]
    names(confMorphs) <- replaceNames(confMorphs)
    correlation = cor(confMorphs, method = "spearman")
    correlation <- round(correlation,2)
    corrplot(correlation, order = 'AOE', addCoef.col = 'black', tl.pos = 'd',
             cl.pos = 'n', col = COL2('PiYG'))
  }
}

cor.test(morphological.counts$Mophological.cluster.50,morphological.counts$Mophological.cluster.23)



#### PART 5 (Question 3)
############ PART 5.1: Association of transcripts to morphological clusters

#create a dataframe containing the frequency of each clusters in a given organ
N <- nrow(morphological.counts)
M <- ncol(morphological.counts)
morphological.frequencies <- data.frame(rep(list(rep(NA,N)),M))
names(morphological.frequencies) <- names(morphological.counts)
rownames(morphological.frequencies) <- rownames(morphological.counts)
for (i in 1:nrow(morphological.counts)){
  row_Sum <- sum(morphological.counts[i,])
  morphological.frequencies[i,] <- morphological.counts[i,]/row_Sum
}

#remove first column of descriptions
RNA.reads <- RNA.read.counts[,-1]

#compute the median average deviation of each transcript
relevantTrans <- c()
for (i in 1:nrow(RNA.reads)){
  relevantTrans <- c(relevantTrans,mad(as.numeric(RNA.reads[i,])))
}
table(relevantTrans)
summary(relevantTrans)
#keep only transcripts with a mad > than the median
RNA.reads <- RNA.reads[relevantTrans > 1.5,]

#change the names in RNA.reads -> dots instead of - , doesn't fit with morphological.counts
futureNames <- c()
for (gtexID in names(RNA.reads)){
  futureNames <- c(futureNames,gsub("\\.","-",gtexID))
}
names(RNA.reads) <- futureNames
#list of significantly up or downregulated genes for each cluster except for 14 (muscle) and 58 (artefacts)
transcripts <- rep(NA,ncol(morphological.frequencies)-2)

#clusters we want to analyze
relevantMorphos <- names(morphological.frequencies)[-c(15,59)]

#data.frames of all padj, log2 fold change, wald test t-values and nominal (non-adjusted) p-values for each cluster and transcript
#, except for clusters 14 and 58
padjRNA <- data.frame(matrix(
  NA, nrow = nrow(RNA.reads),
  ncol = ncol(morphological.frequencies)-2
))
log2RNA <- data.frame(matrix(
  NA, nrow = nrow(RNA.reads),
  ncol = ncol(morphological.frequencies)-2
))
waldRNA <- data.frame(matrix(
  NA, nrow = nrow(RNA.reads),
  ncol = ncol(morphological.frequencies)-2
))
pRNA <- data.frame(matrix(
  NA, nrow = nrow(RNA.reads),
  ncol = ncol(morphological.frequencies)-2
))
rownames(padjRNA) <- rownames(RNA.reads)
names(padjRNA) <- relevantMorphos
rownames(log2RNA) <- rownames(RNA.reads)
names(log2RNA) <- relevantMorphos
rownames(waldRNA) <- rownames(RNA.reads)
names(waldRNA) <- relevantMorphos
rownames(pRNA) <- rownames(RNA.reads)
names(pRNA) <- relevantMorphos

#Actual analysis
for (i in 1:length(relevantMorphos)){
  morph <- relevantMorphos[i]
  print(morph)
  form <- as.formula(paste("~",morph,"+",
                           names(morphological.frequencies)[15]
                           ,"+",names(morphological.frequencies)[59])) #"~cluster + Mophological.cluster.14 + Mophological.cluster.58"
  dds <- DESeqDataSetFromMatrix(countData = RNA.reads,
                                colData = morphological.frequencies, 
                                design=form)
  dds <- DESeq(dds)
  res <- results(dds)
  padjRNA[,i] <- res$padj
  log2RNA[,i] <- res$log2FoldChange
  waldRNA[,i] <- res$stat
  pRNA[,i] <- res$pvalue
  padjMorph <- res$padj
  names(padjMorph) <- rownames(padjRNA)
  transcripts[i] <- list(sign_padj(padjMorph),0.1/63)
}

morpho_Order <- c() #list of the names of the morphological clusters in the order that they appear in transcripts
for (i in 1:length(transcripts)){
  print(names(padjRNA)[i])
  morpho_Order <- c(morpho_Order,names(padjRNA)[i])
  len <- transcripts[[i]]
  print(length(len)) #number of up or downregulated genes
  print(len[1:min(c(10,length(len)))]) #10 most up or downregulated genes
}

#divide lists into up and downregulated genes
sortedTrans <- sortLogs(transcripts,log2RNA)
positiveTrans <- sortedTrans[,1]
negativeTrans <- sortedTrans[,2]

#get list of upregulated genes, amongst all clusters
positiveGenes <- c()
for (i in 1:length(positiveTrans)){
  for (g in positiveTrans[[i]]){
    if ((g %in% positiveGenes) == FALSE & is.na(g) == FALSE){
      positiveGenes <- c(positiveGenes,g)
    }
  }
}

#get list of downregulated genes, amongst all clusters
negativeGenes <- c()
for (i in 1:length(negativeTrans)){
  for (g in negativeTrans[[i]]){
    if ((g %in% negativeGenes) == FALSE & is.na(g) == FALSE){
      negativeGenes <- c(negativeGenes,g)
    }
  }
}

#remove values of length 0 and replace them by NA
for (i in 1:length(positiveTrans)){
  if (length(positiveTrans[[i]]) == 0){
    positiveTrans[i] <- NA
  } 
  if (length(negativeTrans[[i]]) == 0){
    negativeTrans[i] <- NA
  } 
}

#sameMorphs will contain lists of morphological clusters with the same downregulated and upregulated genes (taking order into account)
sameMorphs <- c()
added <- c()
for (i in 1:length(relevantMorphos)){
  if (i %in% added == FALSE){
    added <- c(added,i)
    same <- c(i)
    if ((i+1) <= length(relevantMorphos)){
      for (j in (i+1):length(relevantMorphos)){
        sameNeg <- FALSE
        samePos <- FALSE
        if (any(is.na(positiveTrans[[i]])) & any(is.na(positiveTrans[[j]]))){
          samePos <- TRUE
        }
        if (!(any(is.na(positiveTrans[[i]])) | any(is.na(positiveTrans[[j]])))){
          if (all(positiveTrans[[i]] == positiveTrans[[j]])){
            samePos <- TRUE
          }
        }
        if (any(is.na(negativeTrans[[i]])) & any(is.na(negativeTrans[[j]]))){
          sameNeg <- TRUE
        }
        if (!(any(is.na(negativeTrans[[i]])) | any(is.na(negativeTrans[[j]])))){
          if (all(negativeTrans[[i]] == negativeTrans[[j]])){
            sameNeg <- TRUE
          }
        }
        if (sameNeg & samePos){
          same <- c(same,j)
          added <- c(added,j)
        }
      }
    }
    sameMorphs <- c(sameMorphs,list(same))
  }
}

#compute the correlation of the clusters with the same up and downregulated genes
for (morphs in sameMorphs){
  print(morphs)
  subMorphs <- as.data.frame(morphological.frequencies[,morphs])
  if (ncol(subMorphs) > 1){
    corrplot(cor(subMorphs,method="spearman"))
  }
}

############ PART 5.2: Association of REACTOME gene sets to morphological clusters

geneNames <- RNA.read.counts[,1][relevantTrans >= 1.5]

##########Negative control: DESeq2 analysis of cluster 58
dds <- DESeqDataSetFromMatrix(countData = RNA.reads,
                              colData = morphological.frequencies, 
                              design=~Mophological.cluster.14 + 
                                Mophological.cluster.58)
dds <- DESeq(dds)
res <- results(dds)
padjRNA$Mophological.cluster.58 <- res$padj
pRNA$Mophological.cluster.58 <- res$pvalue
waldRNA$Mophological.cluster.58 <- res$stat
log2RNA$Mophological.cluster.58 <- res$log2FoldChange
#####################################################

#First ranking Metric = log10(adjusted p-value)

rankMetric <- as.data.frame(lapply(padjRNA,log10))
genesets <- c()
positiveNES <- c()
negativeNES <- c()
for (morph in names(rankMetric)){
  print(morph)
  rank <- rankMetric[,morph]
  names(rank) <- geneNames
  rank <- na.omit(rank)
  sortedrank <- sort(rank,decreasing = TRUE)
  fgseaRes <- fgsea(pathways,sortedrank)
  collapsedPathways <- collapsePathways(fgseaRes[order(pval)][padj < 0.05/63],
                                        pathways, sortedrank)
  mainPathways <- fgseaRes[pathway %in% collapsedPathways$mainPathways][
    order(-NES), pathway]
  positiveNES <- c(positiveNES,list(fgseaRes[pathway %in% collapsedPathways$mainPathways][
    NES > 0 & padj < 0.05/63, pathway]))
  negativeNES <- c(negativeNES,list(fgseaRes[pathway %in% collapsedPathways$mainPathways][
    NES < 0 & padj < 0.05/63, pathway]))
  genesets <- c(genesets,list(mainPathways))
  if (morph == "Mophological.cluster.45" | morph == "Mophological.cluster.58"){
    plot.new()
    plotGseaTable(pathways[mainPathways], sortedrank, fgseaRes, 
                  gseaParam=0.5)
  }
  print("Done")
}
#BUT: too many ties in the ranking (warnings returned by fgsea) -> doesn't take into account whether the genes are down- or up-regulated

#Second ranking Metric = log2 fold change

rankMetric <- log2RNA
genesets <- c()
positiveNES <- c()
negativeNES <- c()
for (morph in names(rankMetric)){
  print(morph)
  rank <- rankMetric[,morph]
  names(rank) <- geneNames
  rank <- na.omit(rank)
  sortedrank <- sort(rank,decreasing = TRUE)
  fgseaRes <- fgsea(pathways,sortedrank)
  collapsedPathways <- collapsePathways(fgseaRes[order(pval)][padj < 0.05/63],
                                        pathways, sortedrank)
  mainPathways <- fgseaRes[pathway %in% collapsedPathways$mainPathways][
    order(-NES), pathway]
  positiveNES <- c(positiveNES,list(fgseaRes[pathway %in% collapsedPathways$mainPathways][
    NES > 0 & padj < 0.05/63, pathway]))
  negativeNES <- c(negativeNES,list(fgseaRes[pathway %in% collapsedPathways$mainPathways][
    NES < 0 & padj < 0.05/63, pathway]))
  genesets <- c(genesets,list(mainPathways))
  if (morph == "Mophological.cluster.45" | morph == "Mophological.cluster.58"){
    plot.new()
    plotGseaTable(pathways[mainPathways], sortedrank, fgseaRes, 
                  gseaParam=0.5)
  }
  print("Done")
}
#BUT: doesn't take into account whether the gene is significantly regulated


#Third ranking Metric = -sign(log2 fold change)*log10(adjusted p-value)

rankMetric <- data.frame(matrix(
  NA, nrow = nrow(RNA.reads),
  ncol = ncol(morphological.frequencies)-1
))
rownames(rankMetric) <- rownames(RNA.reads)
names(rankMetric) <- c(relevantMorphos,"Mophological.cluster.58")
for (i in 1:ncol(rankMetric)){
  rankMetric[,i] <- -sign(log2RNA[,i])*log10(padjRNA[,i])
}
genesets <- c()
positiveNES <- c()
negativeNES <- c()
for (morph in names(rankMetric)){
  print(morph)
  rank <- rankMetric[,morph]
  names(rank) <- geneNames
  rank <- na.omit(rank)
  sortedrank <- sort(rank,decreasing = TRUE)
  fgseaRes <- fgsea(pathways,sortedrank)
  collapsedPathways <- collapsePathways(fgseaRes[order(pval)][padj < 0.05/63],
                                        pathways, sortedrank)
  mainPathways <- fgseaRes[pathway %in% collapsedPathways$mainPathways][
    order(-NES), pathway]
  positiveNES <- c(positiveNES,list(fgseaRes[pathway %in% collapsedPathways$mainPathways][
    NES > 0 & padj < 0.05/63, pathway]))
  negativeNES <- c(negativeNES,list(fgseaRes[pathway %in% collapsedPathways$mainPathways][
    NES < 0 & padj < 0.05/63, pathway]))
  genesets <- c(genesets,list(mainPathways))
  if (morph == "Mophological.cluster.45" | morph == "Mophological.cluster.58"){
    plot.new()
    plotGseaTable(pathways[mainPathways], sortedrank, fgseaRes, 
                  gseaParam=0.5)
  }
  print("Done")
}
#BUT: too many similar p-values

#Fourth ranking Metric = -sign(log2 fold change)*log10(p-value)

rankMetric <- data.frame(matrix(
  NA, nrow = nrow(RNA.reads),
  ncol = ncol(morphological.frequencies)-1
))
rownames(rankMetric) <- rownames(RNA.reads)
names(rankMetric) <- c(relevantMorphos,"Mophological.cluster.58")
for (i in 1:ncol(rankMetric)){
  rankMetric[,i] <- -sign(log2RNA[,i])*log10(pRNA[,i])
}

genesets <- c()
positiveNES <- c()
negativeNES <- c()
for (morph in names(rankMetric)){
  print(morph)
  rank <- rankMetric[,morph]
  names(rank) <- geneNames
  rank <- na.omit(rank)
  sortedrank <- sort(rank,decreasing = TRUE)
  fgseaRes <- fgsea(pathways,sortedrank)
  collapsedPathways <- collapsePathways(fgseaRes[order(pval)][padj < 0.05/63],
                                        pathways, sortedrank)
  mainPathways <- fgseaRes[pathway %in% collapsedPathways$mainPathways][
    order(-NES), pathway]
  positiveNES <- c(positiveNES,list(fgseaRes[pathway %in% collapsedPathways$mainPathways][
    NES > 0 & padj < 0.05/63, pathway]))
  negativeNES <- c(negativeNES,list(fgseaRes[pathway %in% collapsedPathways$mainPathways][
    NES < 0 & padj < 0.05/63, pathway]))
  genesets <- c(genesets,list(mainPathways))
  if (morph == "Mophological.cluster.45" | morph == "Mophological.cluster.58"){
    plot.new()
    plotGseaTable(pathways[mainPathways], sortedrank, fgseaRes, 
                  gseaParam=0.5)
  }
  print("Done")
}

for (i in 1:length(genesets)){
  print(names(rankMetric)[i])
  print(length(genesets[[i]]))
}
print(genesets)
print(positiveNES)
print(negativeNES)


for (i in 1:ncol(rankMetric)){
  if ("REACTOME_THE_ROLE_OF_GTSE1_IN_G2_M_PROGRESSION_AFTER_G2_CHECKPOINT" %in% genesets[[i]]){
    print(names(rankMetric)[i])
  }
}

for (i in 1:ncol(rankMetric)){
  if ("REACTOME_CYTOKINE_SIGNALING_IN_IMMUNE_SYSTEM" %in% genesets[[i]]){
    print(names(rankMetric)[i])
  }
}
